// Declaring variables in JS
// Объявление переменных в JS

// до стандарта ES6 в JS объявляли переменные ключевым словом var:
var a = 2;

{
    var a = 3;
    console.log(a); //3
}

console.log(a); //3

/*
 * Область видимости таких переменных ограничивается функцией или скриптом(если переменная глобальная). В остальных случаях они доступны всем блокам кода.

 * Большоя область видимости ведёт к появлению неаккуратных программ.
 * Переменные станится легко перезаписать или получить из них неожиданные значения.

 * В хорошем коде разработчик ограничивает область видимости. Доступ переменной получают только те блоки кода, которым эта переменная действительно нужна. Такой код лучше защищён от ошибок.

*/

//ECMAScript 6 дал разработчикам инструменты для управления областью видимости на уровне блоков, то есть ключевые слова const и let :

let a = 2;

{
    let a = 3;
    console.log(a); //3
}

console.log(a) //2

/*
 * Область видимости переменной a ограничена блоком, в котором переменная объявлена. Так работает let.

 * Дополнительное ограничение вводит const. Когда переменная объявлена через это слово, изменить её значение уже не удастся:
 */

const a = 2;

a = 3; // TypeError

/**
 * Если вы создаёте переменную, но не собираетесь менять её значение, const убережёт от возможных ошибок.
 * 
 * Примитивные типы данных передаются по значение, а объекты - по ссылкам. У последних ограничение действует только на ссылку, но не на элементы. Если об этом забыть, работа const с объектами и массивами покажется странной:
 */

{
    const ARR = [5, 6, 7];

    console.log(ARR); // [5, 6, 7]
    ARR  = 10; // TypeError - мы не можем изменить ссылку на массив...
    ARR[0] = 3; // ..но свободно меняем элементы массива
    console.log(ARR); // [3, 6, 7]
}

// В TypeScript можно запретить изменения элементов объекта.

// Основные особенности let и const:
/**
 * - let и const не существуют до своего объявления;
 * - область видимости let и const совпадает с блоком объявления переменной;
 * - нельзя объявить переменную через const и не присвоить ей значение.
 */
